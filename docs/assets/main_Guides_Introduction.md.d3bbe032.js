import{_ as e,o as a,c as t,S as s}from"./app.19d9338b.js";import"./chunks/theme.a19b6002.js";const m=JSON.parse('{"title":"Introduction & Overview","description":"","frontmatter":{"title":"Introduction & Overview"},"headers":[{"level":2,"title":"Purpose of CQL","slug":"purpose-of-cql","link":"#purpose-of-cql","children":[{"level":3,"title":"Key Features","slug":"key-features","link":"#key-features","children":[]},{"level":3,"title":"Supported Databases","slug":"supported-databases","link":"#supported-databases","children":[]},{"level":3,"title":"Use Cases","slug":"use-cases","link":"#use-cases","children":[]}]}],"relativePath":"main/Guides/Introduction.md","lastUpdated":null}'),i={name:"main/Guides/Introduction.md"},r=s('<h1 id="introduction-overview" tabindex="-1">Introduction &amp; Overview <a class="header-anchor" href="#introduction-overview" aria-hidden="true">#</a></h1><h2 id="purpose-of-cql" tabindex="-1">Purpose of CQL <a class="header-anchor" href="#purpose-of-cql" aria-hidden="true">#</a></h2><p>CQL (Crystal Query Language) is a powerful tool designed for developers working with the Crystal programming language. It provides a streamlined interface for interacting with SQL databases, combining the flexibility of raw SQL with the safety and clarity of Crystalâ€™s type system. CQL simplifies complex database operations, making it easier to perform CRUD (Create, Read, Update, Delete) operations, manage database schemas, and execute advanced queries.</p><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-hidden="true">#</a></h3><ul><li><strong>Database-agnostic</strong>: CQL supports multiple databases, ensuring flexibility in project development.</li><li><strong>Active Record Pattern</strong>: Integrates seamlessly with Crystal structs, allowing developers to work with database records as native Crystal objects.</li><li><strong>Query Builder</strong>: Provides an intuitive API for constructing complex SQL queries, including joins, subqueries, and transactions.</li><li><strong>Associations</strong>: CQL supports defining relationships between tables (<code>has_many</code>, <code>belongs_to</code>, <code>many_to_many</code>), making it easy to navigate related data.</li><li><strong>Migrations</strong>: Facilitates schema evolution by allowing developers to create and manage database migrations.</li></ul><h3 id="supported-databases" tabindex="-1">Supported Databases <a class="header-anchor" href="#supported-databases" aria-hidden="true">#</a></h3><p>CQL is designed to work with a range of SQL databases, including:</p><ul><li><strong>PostgreSQL</strong>: Full support with advanced features like JSONB, arrays, and full-text search.</li><li><strong>MySQL</strong>: Support for common MySQL operations, though more advanced features may be limited.</li><li><strong>SQLite</strong>: Lightweight database support for development and testing environments.</li></ul><h3 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-hidden="true">#</a></h3><p>CQL is ideal for developers looking to integrate Crystal with SQL databases, providing a robust toolset for building data-driven applications. Whether you are developing a small-scale application or a large enterprise system, CQL offers the performance and scalability needed to manage your database operations efficiently.</p>',10),o=[r];function n(l,d,c,u,p,g){return a(),t("div",null,o)}const v=e(i,[["render",n]]);export{m as __pageData,v as default};

const e=/[^a-zA-Z0-9._ ]+/g,t=[{title:"Home",content:"crystal cihttpsgithub.comazutoolkitcqlactionsworkflowscrystal.ymlbadge.svghttpsgithub.comazutoolkitcqlactionsworkflowscrystal.yml cqlcql is a powerful library designed to simplify and enhance the management and execution of sql queries in the crystal programming language. it provides utilities for building validating and executing sql statements ensuring better performance and code maintainability. features query builder programmatically create complex sql queries. insert update delete operations perform crud operations with ease. repository pattern manage your data more effectively using cqlrepositoryt. active record pattern work with your data models using cqlrecordt. installationadd this to your applications shard.ymlyamldependencies  cql    github azutoolkitcqlthen run the following command to install the dependenciesbashshards install getting started 1. define a schemadefine the schema for your database tablescrystalacmedb2  cqlschema.build  acme_db  adapter cqladapterpostgres  uri envdatabase_url do  table movies do    primary id int64 auto_increment true    text title  end  table screenplays do    primary id int64 auto_increment true    bigint movie_id    text content  end  table actors do    primary id int64 auto_increment true    text name  end  table directors do    primary id int64 auto_increment true    bigint movie_id    text name  end  table movies_actors do    primary id int64 auto_increment true    bigint movie_id    bigint actor_id  endend 2. executing querieswith the schema in place you can start executing queriescrystalq  acmedb.queryuser  q.fromusers.whereid 1.firstas userputs user.name 3. inserting datainsert new records into the databasecrystalq  cqlquery.newschemaq.insert  .intousers  .valuesname jane doe email janeexample.com  .last_insert_id 4. updating dataupdate existing recordscrystalu  acmedb.updateu.tableusers  .setname jane smith  .whereid 1  .commit 5. deleting datadelete records from the databasecrystald  acmedb.deleted.fromusers.whereid 1.commit 6. using the repository patternutilize the repository pattern for organized data managementcrystaluser_repository  cqlrepositoryuser int64.newschema users create a new useruser_repository.createname jane doe email janeexample.com fetch all usersusers  user_repository.allusers.each  user puts user.name  find a user by iduser  user_repository.find1puts user.name update a user by iduser_repository.update1 name jane smith 7. active record patternwork with your data using the active record patterncrystalastruct actor  include cqlrecordactor int64  include cqlrelations  define acmedb2 actors  getter id  int64  getter name  string  def initializename  string  endendstruct movie  include cqlrecordmovie int64  include cqlrelations  define acmedb2 movies  has_one screenplay screenplay  many_to_many actors actor join_through movies_actors  has_many directors director foreign_key movie_id  getter id  int64  getter title  string  def initializetitle  string  endendstruct director  include cqlrecorddirector int64  include cqlrelations  define acmedb2 directors  getter id  int64  getter name  string  belongs_to movie foreign_key movie_id  def initializename  string  endendstruct screenplay  include cqlrecordscreenplay int64  include cqlrelations  define acmedb2 screenplays  belongs_to movie foreign_key movie_id  getter id  int64  getter content  string  def initializemovie_id  int64 content  string  endendstruct moviesactors  include cqlrecordmoviesactors int64  define acmedb2 movies_actors  getter id  int64  getter movie_id  int64  getter actor_id  int64   has_many actors actor actor_id  def initializemovie_id  int64 actor_id  int64  endend documentationdetailed api documentation is available at cql documentationhttpsazutoolkit.github.iocql. contributingcontributions are welcome to contribute1. fork this repository.2. create your feature branch git checkout b mynewfeature.3. commit your changes git commit am add some feature.4. push to the branch git push origin mynewfeature.5. create a new pull request. licensethis project is licensed under the mit license. see the license.license file for details. acknowledgmentsthanks to all the contributors who helped in the development of this project.",link:"/index"},{title:"Cql",content:" module cqlcql is a powerful library designed to simplify and enhance the management and execution of sql queries in the crystal programming language. it provides utilities for building validating and executing sql statements ensuring better performance and code maintainability. features query builder programmatically create complex sql queries. insert update delete operations perform crud operations with ease. repository pattern manage your data more effectively using cqlrepositoryt. active record pattern work with your data models using cqlrecordt. installationadd this to your applications shard.ymlyamldependencies  cql    github azutoolkitcqlthen run the following command to install the dependenciesbashshards install getting started 1. define a schemadefine the schema for your database tablescrystalacmedb2  cqlschema.build  acme_db  adapter cqladapterpostgres  uri envdatabase_url do  table movies do    primary id int64 auto_increment true    text title  end  table screenplays do    primary id int64 auto_increment true    bigint movie_id    text content  end  table actors do    primary id int64 auto_increment true    text name  end  table directors do    primary id int64 auto_increment true    bigint movie_id    text name  end  table movies_actors do    primary id int64 auto_increment true    bigint movie_id    bigint actor_id  endend 2. executing querieswith the schema in place you can start executing queriescrystalq  acmedb.queryuser  q.fromusers.whereid 1.firstas userputs user.name 3. inserting datainsert new records into the databasecrystalq  cqlquery.newschemaq.insert  .intousers  .valuesname jane doe email janeexample.com  .last_insert_id 4. updating dataupdate existing recordscrystalu  acmedb.updateu.tableusers  .setname jane smith  .whereid 1  .commit 5. deleting datadelete records from the databasecrystald  acmedb.deleted.fromusers.whereid 1.commit 6. using the repository patternutilize the repository pattern for organized data managementcrystaluser_repository  cqlrepositoryuser int64.newschema users create a new useruser_repository.createname jane doe email janeexample.com fetch all usersusers  user_repository.allusers.each  user puts user.name  find a user by iduser  user_repository.find1puts user.name update a user by iduser_repository.update1 name jane smith 7. active record patternwork with your data using the active record patterncrystalastruct actor  include cqlrecordactor int64  include cqlrelations  define acmedb2 actors  getter id  int64  getter name  string  def initializename  string  endendstruct movie  include cqlrecordmovie int64  include cqlrelations  define acmedb2 movies  has_one screenplay screenplay  many_to_many actors actor join_through movies_actors  has_many directors director foreign_key movie_id  getter id  int64  getter title  string  def initializetitle  string  endendstruct director  include cqlrecorddirector int64  include cqlrelations  define acmedb2 directors  getter id  int64  getter name  string  belongs_to movie foreign_key movie_id  def initializename  string  endendstruct screenplay  include cqlrecordscreenplay int64  include cqlrelations  define acmedb2 screenplays  belongs_to movie foreign_key movie_id  getter id  int64  getter content  string  def initializemovie_id  int64 content  string  endendstruct moviesactors  include cqlrecordmoviesactors int64  define acmedb2 movies_actors  getter id  int64  getter movie_id  int64  getter actor_id  int64   has_many actors actor actor_id  def initializemovie_id  int64 actor_id  int64  endend",link:"/main/Cql"},{title:"Cql::Index",content:" vpre class cqlindexreference  objectan index on a tablethis class represents an index on a tableit provides methods for setting the columns and unique constraintit also provides methods for generating the index nameexample creating a new indexcrystalschema.build do  table users do    column name string    column email string    index name email unique true  endend details table of contentstoc constructors def newtable  table columns  arraysymbol unique  bool  false name  string  nil  nilcreate a new index instance on a table param  table table  the table to create the index on param  columns arraysymbol  the columns to index param  unique bool  whether the index should be unique default false param  name string nil  the name of the index default nil return  nil raise  cqlerror if the table does not exist raise  cqlerror if the column does not existexamplecrystalindex  cqlindex.newtable name email unique true instance methods def columns def index_namegenerate the index name return  string raise  nilexamplecrystalindex_name  index.index_name def name def namename  string  nil def table def unique",link:"/main/Cql/_index"},{title:"Cql::Adapter",content:" vpre enum cqladapterenum  comparable  value  objectrepresents a database adapter module. details table of contentstoc constants sqlitecrystal0 mysqlcrystal1 postgrescrystal2 instance methods def my_sql def postgres def sql_typetype  stringreturns the sql type for the given type.param type type the typereturn string the sql typeexample getting the sql typecrystalcqladaptersqlite.sql_typeint32   integer def sqlite",link:"/main/Cql/Adapter"},{title:"Cql::AlterTable",content:" vpre class cqlaltertablereference  objectthis module is part of the cql namespace and is responsible for handlingdatabase alterations. this class represents an altertable object.example crystalalter_table  altertable.newalter_table.add_columnemail stringalter_table.drop_columnagealter_table.rename_columnemail user_emailalter_table.change_columnage string altertable0x00007f8e7a4e1e80 details table of contentstoc constructors def newtable  cqltable schema  cqlschema instance methods def add_columnname  symbol type  any as as_name  string  nil  nil null  bool  true default  dbany  nil unique  bool  false size  int32  nil  nil index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param type any the data type of the column param as_name string nil an optional alias for the column param null bool whether the column allows null values default true param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param size int32 nil the size of the column default nil param index bool whether the column should be indexed default falseexample  adding a new column with default optionscrystaladd_columnemail stringexample  adding a new column with custom optionscrystaladd_columnage integer null false default 18 def change_columnname  symbol type  anychanges the type of a column in the table. param name symbol the name of the column to be changed param type any the new data type for the columnexample  changing the type of a columncrystalchange_columnage string def create_indexname  symbol columns  arraysymbol unique  bool  falsecreates an index on the table. param name symbol the name of the index param columns arraysymbol the columns to be indexed param unique bool whether the index should be unique default falseexample  creating an indexcrystalcreate_indexindex_users_on_email email unique true def drop_columncolumn  symboldrops a column from the table. param column symbol the name of the column to be droppedexample  dropping a columncrystaldrop_columnage def drop_foreign_keyname  symboldrops a foreign key from the table. param name symbol the name of the foreign key to be droppedexample  dropping a foreign keycrystaldrop_foreign_keyfk_user_id def drop_indexname  symboldrops an index from the table. param name symbol the name of the index to be droppedexample  dropping an indexcrystaldrop_indexindex_users_on_email def foreign_keyname  symbol columns  arraysymbol table  symbol references  arraysymbol on_delete  string  no action on_update  string  no actionadds a foreign key to the table. param name symbol the name of the foreign key param columns arraysymbol the columns in the current table param table symbol the referenced table param references arraysymbol the columns in the referenced table param on_delete string the action on delete default no action param on_update string the action on update default no actionexample  adding a foreign keycrystalforeign_keyfk_user_id user_id users id on_delete cascade def rename_columnold_name  symbol new_name  symbolrenames a column in the table. param old_name symbol the current name of the column param new_name symbol the new name for the columnexample  renaming a columncrystal  rename_columnemail user_email def rename_tablenew_name  symbolrenames the table. param new_name symbol the new name for the tableexample  renaming the tablecrystalrename_tablenew_table_name def to_sqlvisitor  expressionvisitorconverts the alter table actions to sql. param visitor expressionvisitor the visitor to generate sql return string the generated sqlexample  generating sql for alter table actionscrystalsql  to_sqlvisitor",link:"/main/Cql/AlterTable"},{title:"Cql::Column(T)",content:" vpre class cqlcolumntcqlbasecolumn  reference  objecta column in a tablethis class represents a column in a tableit provides methods for setting the column type default value and constraintsit also provides methods for building expressionsexample creating a new columncrystalschema.build do  table users do    column name string null false default john    column age int32 null false  endend details table of contentstoc constructors def newname  symbol type  t.class as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false size  int32  nil  nil index  index  nil  nilcreate a new column instance param  name symbol  the name of the column param  type any  the data type of the column param  as_name string nil  an optional alias for the column param  null bool  whether the column allows null values default false param  default dbany  the default value for the column default nil param  unique bool  whether the column should have a unique constraint default false param  size int32 nil  the size of the column default nil param  index index nil  the index for the column default nil return  nil raise  cqlerror if the column type is not validexamplecrystalcolumn  cqlcolumn.newname string instance methods def expressionexpressions for this column return expressioncolumnbuilder the column expression builderexamplecrystalcolumn  cqlcolumn.newname stringcolumn.expression.eqjohn def validatevaluevalidate the value param value dbany the value to validateexamplecrystalcolumn  cqlcolumn.newname stringcolumn.validatejohn",link:"/main/Cql/Column"},{title:"Cql::Delete",content:" vpre class cqldeletereference  objecta delete querythis class represents a delete queryit provides methods for building a delete queryit also provides methods for executing the queryexample deleting a recordcrystaldelete.fromusers.whereid 1.commit details table of contentstoc constructors def newschema  schemainitialize the delete query param schema schema the schema to use return delete the delete query objectexample deleting a recordcrystaldelete  cqldelete.newschema  .fromusers  .whereid 1  .commit instance methods def backcolumns  symbolsets the columns to return after the delete param columns symbol the columns to return return self the current instance raise exception if the column does not existexample setting the columns to returncrystaldelete  cqldelete.newschema  .fromusers  .backname age def buildbuilds the delete expression return expressiondelete the delete expression raise exception if the table is not set raise exception if the where clause is not setexample building the delete expressioncrystaldelete  cqldelete.newschema  .fromusers  .whereid 1  .commit def commitexecutes the delete query and returns the result return dbresult the result of the queryexample deleting a recordcrystaldelete  cqldelete.newschema  .fromusers  .whereid 1  .commit def fromtable  symbolsets the table to delete from param table symbol the name of the table return self the current instance raise exception if the table does not existexample setting the tablecrystaldelete  cqldelete.newschema  .fromusers def to_sqlgen  schema.gengenerates the sql query and parameters param gen expressiongenerator the generator to use return string arraydbany the query and parametersexample generating a delete querycrystaldelete  cqldelete.newschema  .fromusers  .whereid 1  .to_sql def usingtable  symbolsets the table to use in the using clause param table symbol the name of the table return self the current instance raise exception if the table does not existexample setting the using tablecrystaldelete  cqldelete.newschema  .fromusers  .usingposts def wheresets the columns to return param columns symbol the columns to return return self the current instance raise exception if the column does not existexample setting the columns to returncrystaldelete  cqldelete.newschema  .fromusers  .backname age def whereattr  hashsymbol dbanywhere clause using a hash of conditions to match against param attr hashsymbol dbany the conditions to match against return self the current instanceexample setting the where clausecrystaldelete  cqldelete.newschema  .fromusers  .whereid 1 def wheresets the columns to return param columns symbol the columns to return return self the current instance raise exception if the column does not existexample setting the columns to returncrystaldelete  cqldelete.newschema  .fromusers  .backname age",link:"/main/Cql/Delete"},{title:"Cql::Error",content:" vpre class cqlerrorexception  reference  objecterror classthis class represents an error in the cql libraryit provides a message describing the errorexample raising an errorcrystalraise cqlerror.newsomething went wrong details table of contentstoc constructors def newmessage  string",link:"/main/Cql/Error"},{title:"Cql::ForeignKey",content:" vpre class cqlforeignkeyreference  objecta foreign key constraintthis class represents a foreign key constraintit provides methods for setting the columns table and referencesit also provides methods for setting the on delete and on update actionsexample creating a new foreign keycrystalschema.build do  table users do    column id int32 primary true    column name string  endendtable posts do  column id int32 primary true  column user_id int32  foreign_key user_id users idend details table of contentstoc constructors def newname  symbol columns  arraysymbol table  symbol references  arraysymbol on_delete  string  no action on_update  string  no action",link:"/main/Cql/ForeignKey"},{title:"Cql::Insert",content:" vpre class cqlinsertreference  objectan insert statement builder classthis class provides methods for building an insert statementit also provides methods for executing the statementexample inserting a recordcrystalinsert  .intousers  .valuesname john age 30  .last_insert_idexample inserting multiple recordscrystalinsert  .intousers  .values          name john age 30      name jane age 25      .commitexample inserting a record with a querycrystalinsert  .intousers  .query    select.fromusers.whereid 1  .commit details table of contentstoc constants logcrystallog.forself constructors def newschema  schema instance methods def backcolumns  symbolset the columns to return param columns symbol the columns to return return insert the insert object raise exception if the column does not existexample inserting a recordcrystalinsert.intousers.valuesname john age 30.backid.commit def buildbuild the insert statement objectreturn expressioninsert the insert statementexample building the insert statementcrystalinsert.intousers.valuesname john age 30.commit def commitexecutes the insert statement and returns the result return int64 the last inserted idexample inserting a recordcrystalinsert  .intousers  .valuesname john age 30  .commit 1 def intotable  symbolset the table to insert into param table symbol the table to insert into return insert the insert objectexample inserting a recordcrystalinsert  .intousers  .valuesname john age 30  .commit def last_insert_idas type  primarykeytype  int64inserts and gets the last inserted id from the databaseworks with sqlite postgresql and mysql. return int64 the last inserted idexample getting the last inserted idcrystalinsert.intousers.valuesname john age 30.last_insert_id def queryquery  queryset the query to use for the insert param query query the query to use return insert the insert objectexample inserting a record with a querycrystalinsert.intousers.queryselect.fromusers.whereid 1.commit def to_sqlgen  schema.genconvert the insert object to a sql query param gen generator the generator to use return string arraydbany the query and parameters raise exception if the table does not existexample generating a sql querycrystalinsert.intousers.valuesname john age 30.to_sql def valuesvalues  arrayhashsymbol dbanyset the columns to insert param columns arraysymbol the columns to insert return insert the insert objectexample inserting a recordcrystalinsert  .intousers  .columnsname age  .valuesjohn 30  .commit def valueshash  hashsymbol dbanyset the values to insert param hash hashsymbol dbany the values to insert return insert the insert objectexample inserting a recordcrystalinsert.intousers.valuesname john age 30.commit def valuesset the values to insert param fields hashsymbol dbany the values to insert return insert the insert objectexample inserting a recordcrystalinsert.intousers.valuesname john age 30.commit",link:"/main/Cql/Insert"},{title:"Cql::Migration",content:" vpre class cqlmigrationreference  objectmigrations are used to manage changes to the database schema over time.each migration is a subclass of migration and must implement the up and down methods.the up method is used to apply the migration while the down method is used to rollback the migration.migrations are executed in their version order defined.the migrator class is used to manage migrations and provides methods to apply rollback and redo migrations.the migrator class also provides methods to list applied and pending migrations.example creating a new migrationcrystalclass createuserstable  cqlmigration  self.version  1_i64  def up    schema.alter users do      add_column name string      add_column age int32    end  end  def down    schema.alter users do      drop_column name      drop_column age    end  endendexample applying migrationscrystalschema  cqlschema.buildnorthwind sqlite3db.sqlite3 do s  table schema_migrations do    primary id int32    column name string    column version int64 index true unique true    timestamps  endendmigrator  cqlmigrator.newschemamigrator.upexample rolling back migrationscrystalmigrator.downexample redoing migrationscrystalmigrator.redoexample rolling back to a specific versioncrystalmigrator.down_to1_i64example applying to a specific versioncrystalmigrator.up_to1_i64example listing applied migrationscrystalmigrator.print_applied_migrationsexample listing pending migrationscrystalmigrator.print_pending_migrationsexample listing rolled back migrationscrystalmigrator.print_rolled_back_migrationsexample listing the last migrationcrystalmigrator.last details table of contentstoc constructors def newschema  schema instance methods def down def schema def up",link:"/main/Cql/Migration"},{title:"Cql::Migrator",content:" vpre class cqlmigratorreference  objectthe migrator class is used to manage migrations and provides methods to applyrollback and redo migrations.the migrator class also provides methods to list applied and pending migrations.example creating a new migratorcrystalschema  cqlschema.buildnorthwind sqlite3db.sqlite3 do s  table schema_migrations do    primary id int32    column name string    column version int64 index true unique true    timestamps  endendmigrator  cqlmigrator.newschemaexample applying migrationscrystalmigrator.up details table of contentstoc constants logcrystallog.forself constructors def newschema  schema class methods def migrations def migrationsmigrations  arraymigration.class instance methods def applied_migrationsreturns the applied migrations. return arraymigrationrecordexample listing applied migrationscrystalmigrator.applied_migrations def downsteps  int32  migrator.migrations.sizerolls back the last migration. param steps int32 the number of migrations to roll back default 1example rolling back migrationscrystalmigrator.down def down_toversion  int64rolls back to a specific migration version. param version int64 the version to roll back toexample rolling back to a specific versioncrystalmigrator.down_to1_i64 def lastreturns the last migration.example listing the last migrationcrystalmigrator.lastreturn migration.class  nil def pending_migrationsreturns the pending migrations. return arraymigrationrecordexample listing pending migrationscrystalmigrator.pending_migrations def print_applied_migrationsprints the applied migrations.example listing applied migrationscrystalmigrator.print_applied_migrations def print_pending_migrationsprints the pending migrations.example listing pending migrationscrystalmigrator.print_pending_migrations def print_rolled_back_migrationsm  arraymigration.classprints the rolled back migrations. param m arraymigration.class the migrations to print return nilexample listing rolled back migrationscrystalmigrator.print_rolled_back_migrations def redoredoes the last migration.example redoing migrationscrystalmigrator.redo def repo def rollbacksteps  int32  1rolls back the last migration. param steps int32 the number of migrations to roll back default 1example rolling back migrationscrystalmigrator.rollback def schema def upsteps  int32  migrator.migrations.sizeapplies the pending migrations.  param steps int32 the number of migrations to apply default allexample applying migrationscrystalmigrator.up def up_toversion  int64applies migrations up to a specific version. param version int64 the version to apply up toexample applying to a specific versioncrystalmigrator.up_to1_i64",link:"/main/Cql/Migrator"},{title:"Cql::Migrator::MigrationRecord",content:" vpre class cqlmigratormigrationrecorddbmappable  dbserializable  reference  objectrepresents a migration record.field id int64 the migration record idfield name string the migration namefield version int64 the migration versionfield created_at time the creation timefield updated_at time the update timeexample creating a migration recordcrystalrecord  cqlmigrationrecord.new0_i64 createuserstable 1_i64 details table of contentstoc included modulesdbmappable dbserializable constructors def newid  int64 name  string version  int64 created_at  time  time.local updated_at  time  time.local def newrs  dbresultset class methods def from_rsrs  dbresultset instance methods def created_at def id def name def updated_at def version",link:"/main/Cql/Migrator/MigrationRecord"},{title:"Cql::PrimaryKey(T)",content:" vpre class cqlprimarykeytcqlcolumn  cqlbasecolumn  reference  objectprimary key column definitionexamplecrystalschema.table users do  primary id int32  column name stringend details table of contentstoc constructors def newname  symbol  id type  primarykeytype  int64.class as_name  string  nil  nil auto_increment  bool  true unique  bool  true default  dbany  nil instance methods def as_name def auto_increment def uniquenodoc",link:"/main/Cql/PrimaryKey"},{title:"Cql::PrimaryKeyType",content:" vpre alias cqlprimarykeytyperepresents a database primary key column type. details table of contentstoc",link:"/main/Cql/PrimaryKeyType"},{title:"Cql::Query",content:" vpre class cqlqueryreference  objectthe query class is responsible for building sql queries in a structured manner.it holds various components like selected columns tables conditions and more.it provides methods to execute the query and return results.example creating a new querycrystalschema  cqlschema.newcqlquery.newschemaquery.selectname age.fromusers.wherename john.alluser name  john age  30example executing a query and iterating over resultscrystalschema  cqlschema.newquery  cqlquery.newschemaquery.selectname age.fromusers.wherename john.eachuser do user  puts user.nameend john details table of contentstoc constructors def newschema  schemainitializes the query object with the provided schema. param schema schema the schema object to use for the query return query the query objectexample creating a new querycrystalschema  cqlschema.newquery  cqlquery.newschema cqlquery0x00007f8b1b0b3b00 instance methods def aggr_columns def allas as_kindexecutes the query and returns all records. param as type the type to cast the results to return arraytype the results of the queryexamplecrystalschema  cqlschema.newquery  cqlquery.newschemaquery.selectname age.fromusers.alluser user0x00007f8b1b0b3b00 namejohn age30 user0x00007f8b1b0b3b00 namejane age25 def allas as_kind param as type the type to cast the results to return arraytype the results of the queryexamplecrystalschema  cqlschema.newquery  cqlquery.newschemaquery.selectname age.fromusers.alluser user0x00007f8b1b0b3b00 namejohn age30 user0x00007f8b1b0b3b00 namejane age25 def avgcolumn  symboladds an avg aggregate function to the query. param column symbol the column to average return query the query objectexamplecrystalquery.avgrating select avgrating from users def buildbuilds the final query expression. return expressionquery the query expressionexamplecrystalquery.build expressionquery0x00007f8b1b0b3b00 def columns def countcolumn  symbol  adds a count aggregate function to the query. param column symbol the column to count return query the query objectexamplecrystalquery.countid select countid from users def distinctsets the distinct flag to true. return query the query objectexamplecrystalquery.fromusers.distinct select distinct  from users def distinct def eachas as_kind iterates over each result and yields it to the provided block.examplecrystalquery.eachuser do user  puts user.nameend john def firstas as_kindexecutes the query and returns the first record. param as type the type to cast the result to return type the first result of the queryexamplecrystalschema  cqlschema.newquery  cqlquery.newschemaquery.selectname age.fromusers.firstuser user0x00007f8b1b0b3b00 namejohn age30 def firstas as_kind param as type the type to cast the result to return type the first result of the queryexamplecrystalschema  cqlschema.newquery  cqlquery.newschemaquery.selectname age.fromusers.firstuser user0x00007f8b1b0b3b00 namejohn age30 def fromtbls  symbolspecifies the tables to select from. param tbls symbol the tables to select from return query the query objectexamplecrystalquery.fromusers orders select  from users orders def getas as_kindexecutes the query and returns a scalar value. param as type the type to cast the result to return type the scalar result of the queryexample query.getint64crystalschema  cqlschema.newquery  cqlquery.newschemaquery.selectcount.fromusers.getint64 10 def groupcolumnsspecifies the columns to group by. param columns symbol the columns to group by return query the query objectexamplecrystalquery.fromproducts.groupcategory select  from products group by category def group_by def having def havingadds a having condition to the grouped results. param block block the block to evaluate the having condition return query the query objectexamplecrystalquery.fromproducts.groupcategory.having  avgprice  100  select  from products group by category having avgprice  100 def innertable  symbol on  hashcqlbasecolumn cqlbasecolumn  dbanyadds an inner join to the query. param table symbol the table to join param on hashcqlbasecolumn cqlbasecolumn  dbany the join condition return query the query objectexamplecrystalquery.innerorders on  users.id  orders.user_id  select  from users inner join orders on users.id  orders.user_id def innertable  symbol adds an inner join to the query. param table symbol the table to join yield filterbuilder the block to build the conditions return query the query object raise exception if the block is not provided raise exception if the block does not return an expression raise exception if the column does not existexamplecrystalquery.innerorders  w w.users.id  orders.user_id  select  from users inner join orders on users.id  orders.user_id def joins def lefttable  symbol on  hashcqlbasecolumn cqlbasecolumn  dbanyadds a left join to the query. param table symbol the table to join param on hashcqlbasecolumn cqlbasecolumn  dbany the join conditionexamplecrystalquery.leftorders on  users.id  orders.user_id  select  from users left join orders on users.id  orders.user_id def lefttable  symbol adds a left join to the query using a block. param table symbol the table to join yield filterbuilder the block to build the conditions return query the query object raise exception if the block is not provided raise exception if the block does not return an expression raise exception if the column does not existexamplecrystalquery.leftorders  w w.users.id  orders.user_id  select  from users left join orders on users.id  orders.user_id def limitvalue  int32sets the limit for the number of records to return. param value int32 the limit value return query the query objectexamplecrystalquery.fromusers.limit10 select  from users limit 10 def limit def maxcolumn  symboladds a max aggregate function to the query. param column symbol the column to find the maximum value of return query the query objectexamplecrystalquery.fromusers.maxprice select maxprice from users def mincolumn  symboladds a min aggregate function to the query. param column symbol the column to find the minimum value of return query the query objectexamplecrystalquery.minprice select minprice from users def offsetvalue  int32sets the offset for the query. param value int32 the offset value return query the query objectexamplecrystalquery.fromusers.limit10.offset20 select  from users limit 10 offset 20 def offset def orderfieldsspecifies the columns to order by. param fields symbol the columns to order by return query the query objectexamplecrystalquery.ordername age select  from users order by name age def orderspecifies the columns to order by. param fields hashsymbol symbol the columns to order by and their direction return query the query objectexamplecrystalquery.ordername asc age desc select  from users order by name asc age desc def order_by def righttable  symbol on  hashcqlbasecolumn cqlbasecolumn  dbanyadds a right join to the query. param table symbol the table to join param on hashcqlbasecolumn cqlbasecolumn  dbany the join condition return query the query objectexamplecrystalquery.rightorders on  users.id  orders.user_id  select  from users right join orders on users.id  orders.user_id def righttable  symbol adds a right join to the query using a block. param table symbol the table to join yield filterbuilder the block to build the conditions return query the query object raise exception if the block is not provided raise exception if the block does not return an expression raise exception if the column does not exist raise exception if the value is invalidexamplecrystalquery.rightorders  w w.users.id  orders.user_id  select  from users right join orders on users.id  orders.user_id def selectcolumns  symbolspecifies the columns to select. param columns symbol the columns to select return query the query objectexamplecrystalquery.selectname age select name age from users def selectspecifies the columns to select. param columns arraysymbol the columns to select return query the query objectexamplecrystalquery.fromusers address.selectusers name age address city state select users.name users.age address.city address.state from users address def sumcolumn  symboladds a sum aggregate function to the query. param column symbol the column to sum return query the query objectexamplecrystalquery.sumtotal_amount select sumtotal_amount from users def tables def to_sqlgen  schema.genconverts the query into an sql string and its corresponding parameters. param gen generator the generator to use for converting the query return tuplestring arraydbany the sql query and its parametersexamplecrystalquery.to_sql select  from users where name   and age   john 30 def wherehash  hashsymbol dbanyadds a where condition with a hash of columnvalue pairs. param hash hashsymbol dbany the hash of columnvalue pairs return query the query objectexamplecrystalquery.fromusers.wherename john age 30 select  from users where name  john and age  30 def where def whereadds a where condition with a block. fields filterbuilder the block to build the conditions return query the query object raise exception if the column does not exist raise exception if the value is invalid raise exception if the value is not of the correct typeexamplecrystalquery.fromusers.wherename john select  from users where name  john def whereadds where conditions using a block. yield filterbuilder the block to build the conditions return query the query object raise exception if the block is not provided raise exception if the block does not return an expression raise exception if the column does not existexamplecrystalquery.fromusers.where  w w.name  john  select  from users where name  john macros macro method_missingcall",link:"/main/Cql/Query"},{title:"Cql::Record(T, Pk)",content:" vpre module cqlrecordt pkwrite documentation for record moduleexample using the record modulecrystalacmedb  cqlschema.buildacme_db adapter cqladapterpostgres  uri postgresqlexampleexamplelocalhost5432example do  table posts do    primary id int64 auto_increment true    text title    text body    timestamp published_at  end  table comments do    primary    bigint post_id    text body  endendstruct post  include cqlrecordpost  define acmedb posts  getter id  int64  getter title  string  getter body  string  getter published_at  time  def initializetitle  string body  string published_at  time  time.utc  endendstruct comment  include cqlrecordcomment  define acmedb comments  getter id  int64  getter post_id  int64  getter body  string  def initializepost_id  int64 body  string  endend details table of contentstoc instance methods def attributesattrs  hashsymbol dbanyset the records attributes from a hash param attrs hashsymbol dbany the attributes to set return nilexample setting the records attributescrystaluser.attributes  name alice email email protected def attributesdefine instancelevel methods for querying and manipulating datafetch the records id or raise an error if its nil return primarykey the idexample fetching the records idcrystaluser.attributes  id 1 name alice email  email protected  def deletedelete the record from the database return nilexample deleting the recordcrystaluser.delete def ididentity method for the record id return primarykey the idexample fetching the records idcrystaluser.id def idid  pkset the records id param id primarykey the idexample setting the records idcrystaluser.id  1 def persistedcheck if the record has been persisted to the database return bool true if the record has an id false otherwiseexample checking if the record is persistedcrystaluser.persisted def reloaddefine instancelevel methods for querying and manipulating datafetch the records id or raise an error if its nil return primarykey the idexample fetching the records idcrystaluser.reload def savedefine instancelevel methods for saving and deleting recordssave the record to the database or update it if it already exists return nilexample saving the recordcrystaluser.save def updatefields  hashsymbol dbanydelete the record from the database if it exists return nilexample deleting the recordcrystaluser.delete def updateupdate the record with the given record objectexample updating the recordcrystalbob  user.newname bob email  email protectedid  bob.savebob.reloadbon.name  juanbob.update def updateupdate the record with the given fields param fields hashsymbol dbany the fields to update return nilexample updating the recordcrystaluser.updatename alice email  email protected",link:"/main/Cql/Record"},{title:"Cql::Relations",content:" vpre module cqlrelations details table of contentstoc",link:"/main/Cql/Relations"},{title:"Cql::Relations::BelongsTo",content:" vpre module cqlrelationsbelongsto details table of contentstoc macros macro belongs_toassoc foreign_keydefine the belongs_to association",link:"/main/Cql/Relations/BelongsTo"},{title:"Cql::Relations::Collection(Target, Pk)",content:" vpre class cqlrelationscollectiontarget pkreference  objecta collection of records for a one to many relationshipthis class is used to manage the relationship between two tablesthrough a foreign key column in the target tableand provide methods to manage the association between the two tablesand query records in the associated table based on the foreign key valueof the parent record. param  target cqlmodel  the target model param  pk int64  the primary key type return  nilexamplecrystalclass user  include cqlmodeluser int64  property id  int64  property name  string  has_many posts post foreign_key user_idend details table of contentstoc constructors def newkey  symbol id  pk cascade  bool  false query  cqlquery  cqlquery.newtarget.schema.fromtarget.tableinitialize the manytomany association collection class param  key symbol  the key for the parent record param  id pk  the id value for the parent record param  target_key symbol  the key for the associated record param  cascade bool  delete associated records param  query cqlquery  query object return  manycollectionexamplecrystalmanycollection.new  movie_id  1  actor_id  false  cqlquery.newactor.schema.fromactor.table instance methods def record  targetcreate a new record and associate it with the parent record if it doesnt exist param  record target return  arraytargetexamplecrystalmovie.actors  actor.newname laurence fishburnemovie.actors.reloadmovie.actors.all actor0x00007f8b3b1b3f00 id1 namelaurence fishburne def allcreate a new record and associate it with the parent record return  arraytargetexamplecrystalmovie.actors.allmovie.actors.createname carrieanne mossmovie.actors.reload actor0x00007f8b3b1b3f00 id1 namecarrieanne moss def clearclears all associated records from the parent record and the database return   of texamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all  1movie.actors.clearmovie.actors.reloadmovie.actors.all   def createrecord  targetcreate a new record and associate it with the parent record param  attributes hashsymbol string  int64 return  arraytarget raise  cqlerrorexamplecrystalmovie.actors.createname hugo weavingmovie.actors.reloadmovie.actors.all actor0x00007f8b3b1b3f00 id1 namehugo weaving def createcreate a new record and associate it with the parent record param  attributes hashsymbol string  int64 return  arraytarget raise  cqlerrorexamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all actor0x00007f8b3b1b3f00 id1 namecarrieanne moss def deleterecord  targetdelete the associated record from the parent record if it exists param  record target return  boolexamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all  1movie.actors.deleteactor.find1movie.actors.reloadmovie.actors.all  of actor def deleteid  pkdelete the associated record from the parent record if it exists param  id pk return  boolexamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all  1movie.actors.delete1movie.actors.reloadmovie.actors.all   def emptycheck if the association is empty or not return  boolexamplecrystalmovie.actors.empty true def existscheck if the association exists or not based on the attributes provided param  attributes hashsymbol string  int64 return  boolexamplecrystalmovie.actors.existsname keanu reeves true def findfind associated records based on the attributes provided for the parent record param  attributes hashsymbol string  int64 return  arraytargetexamplecrystalmovie.actors.findname keanu reeves actor0x00007f8b3b1b3f00 id1 namekeanu reeves def idsreturns a list if primary keys for the associated records return  arraypkexamplecrystalmovie.actors.ids 1 2 3 def idsids  arraypkassociates the parent record with the records that match the primary keys provided param  ids arraypk return  arraytargetexamplecrystalmovie.actors.ids  1 2 3movie.actors.reloadmovie.actors.all  actor0x00007f8b3b1b3f00 id1 namecarrieanne moss   actor0x00007f8b3b1b3f00 id2 namehugo weaving  actor0x00007f8b3b1b3f00 id3 namelaurence fishburne def reloadreload the association records from the database and return them return  arraytargetexamplecrystalmovie.actors.reload actor0x00007f8b3b1b3f00 id1 namecarrieanne moss def sizereturns the number of associated records for the parent record return  int64examplecrystalmovie.actors.size 1 macros macro method_missingcall",link:"/main/Cql/Relations/Collection"},{title:"Cql::Relations::HasMany",content:" vpre module cqlrelationshasmanydefine the has_many association module that will be included in the modelto define a onetomany relationship between two tables in the databaseand provide methods to manage the association between the two tables andquery records in the associated table based on the foreign key value ofthe parent record. param  name symbol  the name of the association param  type cqlmodel  the target model param  foreign_key symbol  the foreign key column in the target table return  nilexamplecrystalclass user  include cqlmodeluser int64  property id  int64  property name  string  has_many posts post foreign_key user_idend details table of contentstoc macros macro has_manyname type foreign_key cascade  false",link:"/main/Cql/Relations/HasMany"},{title:"Cql::Relations::HasOne",content:" vpre module cqlrelationshasonedefine the has_one association details table of contentstoc macros macro has_onename type",link:"/main/Cql/Relations/HasOne"},{title:"Cql::Relations::ManyCollection(Target, Through, Pk)",content:" vpre class cqlrelationsmanycollectiontarget through pkcqlrelationscollection  reference  objecta collection of records for a many to many relationshipthis class is used to manage the relationship between two tablesthrough a join table througha manytomany association occurs when multiple records of onemodel can be associated with multiple records of another modeland vice versa. typically it requires a join table or a junction tableto store the relationships between the records of the two models.heres how a manytomany association is commonly implementedin cql using crystal.examplecrystalclass movie  include cqlmodelmovie int64  property id  int64  property title  string  many_to_many actors actor join_through movies_actorsendclass actor  include cqlmodelactor int64  property id  int64  property name  stringendclass moviesactors  include cqlmodelmoviesactors int64  property id  int64  property movie_id  int64  property actor_id  int64endmovie  movie.createtitle the matrixactor  actor.createname keanu reeves details table of contentstoc constructors def newkey  symbol id  pk target_key  symbol cascade  bool  false query  cqlquery  cqlquery.newtarget.schema.fromtarget.tableinitialize the manytomany association collection class param  key symbol  the key for the parent record param  id pk  the id value for the parent record param  target_key symbol  the key for the associated record param  cascade bool  delete associated records param  query cqlquery  query object return  manycollectionexamplecrystalmanycollection.new  movie_id  1  actor_id  false  cqlquery.newactor.schema.fromactor.table instance methods def clearclears all associated records from the parent record and the database return   of texamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all  1movie.actors.clearmovie.actors.reloadmovie.actors.all   def createrecord  targetcreate a new record and associate it with the parent record param  attributes hashsymbol string  int64 return  arraytarget raise  cqlerrorexamplecrystalmovie.actors.createname hugo weavingmovie.actors.reloadmovie.actors.all actor0x00007f8b3b1b3f00 id1 namehugo weaving def createcreate a new record and associate it with the parent record param  attributes hashsymbol string  int64 return  arraytarget raise  cqlerrorexamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all actor0x00007f8b3b1b3f00 id1 namecarrieanne moss def deleterecord  targetdelete the associated record from the parent record if it exists param  record target return  boolexamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all  1movie.actors.deleteactor.find1movie.actors.reloadmovie.actors.all  of actor def deleteid  pkdelete the associated record from the parent record if it exists param  id pk return  boolexamplecrystalmovie.actors.createname carrieanne mossmovie.actors.reloadmovie.actors.all  1movie.actors.delete1movie.actors.reloadmovie.actors.all   def idsids  arrayint64associates the parent record with the records that match the primary keys provided param  ids arraypk return  arraytargetexamplecrystalmovie.actors.ids  1 2 3movie.actors.reloadmovie.actors.all  actor0x00007f8b3b1b3f00 id1 namecarrieanne moss   actor0x00007f8b3b1b3f00 id2 namehugo weaving  actor0x00007f8b3b1b3f00 id3 namelaurence fishburne",link:"/main/Cql/Relations/ManyCollection"},{title:"Cql::Relations::ManyToMany",content:" vpre module cqlrelationsmanytomany details table of contentstoc macros macro many_to_manyname type join_through cascade  falsedefines a manytomany relationship between two models.this method will define a getter method that returns a manytomanycollection.the collection can be used to add and remove records from the join table. param  name symbol  the name of the association param  type cqlmodel  the target model param  join_through cqlmodel  the join table model param  cascade bool  delete associated recordsexamplecrystalclass movie  include cqlmodelmovie int64  property id  int64  property title  string  many_to_many actors actor join_through movies_actorsendclass actor  include cqlmodelactor int64  property id  int64  property name  stringendclass moviesactors  include cqlmodelmoviesactors int64  property id  int64  property movie_id  int64  property actor_id  int64end",link:"/main/Cql/Relations/ManyToMany"},{title:"Cql::Repository(T, Pk)",content:" vpre class cqlrepositoryt pkreference  objecta repository for a specific tablethis class provides a highlevel interface for interacting with a tableit provides methods for querying creating updating and deleting recordsit also provides methods for pagination and counting recordsexample creating a new repositorycrystalclass userrepository  cqlrepositoryuser def initializeschema  schema table  symbolenduser_repo  userrepository.newschema usersuser_repo.alluser_repo.find1 details table of contentstoc constructors def newschema  schema table  symbolinitialize the repository with a schema and table name param schema schema the schema to use param table symbol the name of the table return repository the repository objectexample creating a new repositorycrystalclass userrepository  cqlrepositoryuserenduser_repo  userrepository.newschema users instance methods def allfetch all records of type t return arrayt the recordsexample fetching all recordscrystaluser_repo.all def buildattrs  hashsymbol dbanybuild a new object of type t with the given attributes param attrs hashsymbol dbany the attributes to use return t the new objectexample building a new user objectcrystaluser_repo.buildname alice email  email protected def countcount all records in the table return int64 the number of recordsexample counting all recordscrystaluser_repo.count def createattrs  hashsymbol dbanycreate a new record with given attributes param attrs hashsymbol dbany the attributes to use return primarykey the id of the new recordexample creating a new recordcrystaluser_repo.createname alice email  email protected def create def deleteid  pkdelete a record by id param id primarykey the id of the recordexample deleting a record by idcrystaluser_repo.delete1 def delete def delete_alldelete all records in the tableexample deleting all recordscrystaluser_repo.delete_all def delete_bydelete records matching specific fields param fields hashsymbol dbany the fields to matchexample deleting records by emailcrystaluser_repo.delete_byemail  email protected def existscheck if records exist matching specific fields param fields hashsymbol dbany the fields to match return bool true if records exist false otherwiseexample checking if a record exists by emailcrystaluser_repo.existsemail  email protected def findid  pkfind a record by id return nil if not found param id primarykey the id of the record return t the record or nil if not foundexample fetching a record by idcrystaluser_repo.find1 def findid  pkfind a record by id raise an error if not found param id primarykey the id of the record return t the recordexample fetching a record by idcrystaluser_repo.find1 def find_all_byfind all records matching specific fields param fields hashsymbol dbany the fields to match return arrayt the recordsexample fetching all active userscrystaluser_repo.find_all_byactive true def find_byfind a record by specific fields param fields hashsymbol dbany the fields to match return t the record or nil if not foundexample fetching a record by emailcrystaluser_repo.find_byemail  email protected def firstfetch the first record in the table return t the first record or nil if the table is emptyexample fetching the first recordcrystaluser_repo.first def insert def lastfetch the last record in the table return t the last record or nil if the table is emptyexample fetching the last recordcrystaluser_repo.last def pagepage_number per_page  10paginate results based on page number and items per page param page_number int32 the page number to fetch param per_page int32 the number of items per page return arrayt the records for the pageexample paginating resultscrystaluser_repo.page1 10 def per_pageper_pagelimit the number of results per page param per_page int32 the number of items per page return arrayt the records for the pageexample limiting results per pagecrystaluser_repo.per_page10 def query def updateid  pk attrs  hashsymbol dbanyupdate a record by id with given attributes param id primarykey the id of the record param attrs hashsymbol dbany the attributes to updateexample updating a record by idcrystaluser_repo.update1 active true def updateid  pk fieldsupdate a record by id with given fields param id primarykey the id of the record param fields hashsymbol dbany the fields to updateexample updating a record by idcrystaluser_repo.update1 active true def update def update_allattrs  hashsymbol dbanyupdate all records with given attributes param attrs hashsymbol dbany the attributes to updateexample updating all recordscrystaluser_repo.update_allactive true def update_bywhere_attrs  hashsymbol dbany update_attrs  hashsymbol dbanyupdate records matching where attributes with update attributes param where_attrs hashsymbol dbany the attributes to match param update_attrs hashsymbol dbany the attributes to updateexample updating records by emailcrystaluser_repo.update_byemail  email protected active true",link:"/main/Cql/Repository"},{title:"Cql::Schema",content:" vpre class cqlschemareference  objectthe schema class represents a database schema.this class provides methods to build and manage a database schema includingcreating tables executing sql statements and generating queries.example creating a new schemacrystalschema  cqlschema.buildnorthwind sqlite3db.sqlite3 do  table users do    primary id int64 auto_increment true    column name string    column email string  endendexample executing a sql statementcrystalschema.execcreate table products id integer primary key name textexample creating a new querycrystalquery  schema.querythe schema class represents a database schema. details table of contentstoc constants logcrystallog.forself constructors def newname  symbol uri  string adapter  adapter  adaptersqlite version  string  1.0initializes a new schema. param name symbol the name of the schema param uri string the uri of the database param adapter adapter the database adapter default adaptersqlite param version string the version of the schema default 1.0example initializing a new schemacrystalschema  cqlschema.newnorthwind sqlite3db.sqlite3 class methods def buildname  symbol uri  string adapter  adapter  adaptersqlite version  string  1.0 builds a new schema. param name symbol the name of the schema param uri string the uri of the database param adapter adapter the database adapter default adaptersqlite param version string the version of the schema default 1.0 yield schema the schema being built return schema the built schemaexamplecrystalschema  cqlschema.buildnorthwind sqlite3db.sqlite3 do s  s.create_table users do    primary id int64 auto_increment true    column name string    column email string  endend instance methods def adapter return adapter the database adapter default adaptersqlite def altertable_name  symbol alter a table in the schema. param table_name symbol the name of the table yield altertable the table being alteredexamplecrystalschema.alterusers do t  t.add_column age int32endexamplecrystalschema.alterusers do t  t.drop_column ageend def db return dbconnection the database connection def deletecreates a new delete query for the schema. return delete the new delete queryexamplecrystaldelete  schema.delete def execsql  stringexecutes a sql statement. param sql string the sql statement to executeexamplecrystalschema.execcreate table users id integer primary key name text def gen return expressiongenerator the expression generator def insertcreates a new insert query for the schema. return insert the new insert queryexamplecrystalinsert  schema.insert def migratorcreates a new migrator for the schema. return migrator the new migratorexamplecrystalmigrator  schema.migrator def name return symbol the name of the schema def querycreates a new query for the schema. return query the new queryexamplecrystalquery  schema.query def tablename  symbol as as_name  nil creates a new table in the schema. param name symbol the name of the table param as_name symbol the alias of the table yield table the table being created return table the created tableexamplecrystalschema.create_table users do  primary id int64 auto_increment true  column name string  column email stringend def tables return hashsymbol table the tables in the schema def updatecreates a new update query for the schema. return update the new update queryexamplecrystalupdate  schema.update def uri return string the uri of the database def version return string the version of the schema macros macro method_missingcall",link:"/main/Cql/Schema"},{title:"Cql::Table",content:" vpre class cqltablereference  objectrepresents a table in the database.this class is responsible for handling table creation modification and deletion. usagecrystaltable  table.newusers schema table0x00007f8e7a4e1e80crystaltable.columnid int64 primary truetable.columnname stringtable.create_sql create table users id bigint primary key name textcrystaltable  table.newusers schematable.drop nilcrystaltable  table.newusers schematable.truncate niltable  table.newusers schematable.columnid int64 primary truetable.columnname stringtable.create nil details table of contentstoc constants logcrystallog.forself constructors def newtable_name  symbol schema  schema as_name  string  nil  nil instance methods def add_indexcolumns  arraysymbol unique  bool  false table  table  selfadds a new column to the table. param columns arraysymbol the columns to be indexed param unique bool whether the index should be unique default false param table table the table to add the index to default self return index the new indexexample adding a new indexcrystaladd_indexemail unique trueadd_indexemail username unique trueadd_indexemail username unique true table users def as_name def bigintname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalbigint agebigint age as user_age null false default 18 unique true index true def blobname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false size  int32  nil  nil index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalblob datablob data as binary_data null false default nil unique true index true def booleanname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalboolean activeboolean active as is_active null false default false unique true index true def columnname  symbol type  t.class as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false size  int32  nil  nil index  bool  false forall tadds a new column to the table. param name symbol the name of the column to be added param type t.class the data type of the column param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param size int32 nil the size of the column default nil param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalcolumn email string def columns def createcreates the table in the database. return nilexamplecrystaltable  table.newusers schematable.columnid int64 primary truetable.columnname stringtable.create nil def create_sqlgenerates the sql to create the table.examplecrystaltable  table.newusers schematable.columnid int64 primary truetable.columnname stringtable.create_sqlcrystal create table users id bigint primary key name text def datename  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystaldate birthdaydate birthday as date_of_birth null false default time.local unique true index true def doublename  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystaldouble agedouble age as user_age null false default 18.0 unique true index true def dropdrops the table from the database. return nilexamplecrystaltable  table.newusers schematable.drop nil def drop_sqlgenerates the sql to drop the table. return string the sql queryexamplecrystaltable  table.newusers schematable.drop_sqlcrystal drop table users def expressiongets table expression for sql query generation return expressiontable the table expressionexamplecrystaltable  table.newusers schematable.expression expressiontable0x00007f8e7a4e1e80 def floatname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalfloat agefloat age as user_age null false default 18.0 unique true index true def integername  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalinteger ageinteger age as user_age null false default 18 unique true index true def intervalname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystalinterval durationinterval duration as time_span null false default time.local unique true index true def primaryname  symbol  id type  t.class  int64 auto_increment  bool  true as as_name  nil unique  bool  true forall tadds a new column to the table. param name symbol the name of the column to be added param type any the data type of the column param auto_increment bool whether the column should auto increment default true param as_name string nil an optional alias for the column param unique bool whether the column should have a unique constraint default trueexample adding a new primary key columncrystalprimary id int64primary id int64 auto_increment false def table_name def table_nametable_name  symbol def textname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false size  int32  nil  nil index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystaldecimal pricedecimal price as product_price null false default 0.0 unique true index true def timestampname  symbol as as_name  string  nil  nil null  bool  false default  dbany  nil unique  bool  false index  bool  falseadds a new column to the table. param name symbol the name of the column to be added param as_name string nil an optional alias for the column param null bool whether the column allows null values default false param default dbany nil the default value for the column default nil param unique bool whether the column should have a unique constraint default false param index bool whether the column should be indexed default false return column the new columnexample adding a new column with default optionscrystaltimestamp created_attimestamp created_at as created_at null false default time.local unique true index true def timestampsadds a new column to the table.example adding timestamps to the tablecrystaltimestamps def truncatetruncates the table in the database. return nilexamplecrystaltable  table.newusers schematable.truncate nil def truncate_sqlgenerates the sql to truncate the table. return string the sql queryexamplecrystaltable  table.newusers schematable.truncate_sql truncate table users macros macro method_missingcall",link:"/main/Cql/Table"},{title:"Cql::Update",content:" vpre class cqlupdatereference  objectthe cqlupdate class represents an sql update statement.examplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit usage initializeschema  schema  initializes a new instance of cqlupdate with the given schema. commit  dbresult  executes the update query and returns the result. to_sqlgen  schema.gen  string arraydbany  generates the sql query and parameters. tabletable  symbol  self  sets the table to update. setsetters  hashsymbol dbany  self  sets the column values to update using a hash. setfields  self  sets the column values to update using keyword arguments. whereblock  self  sets the where clause using a block. wherefields  self  sets the where clause using keyword arguments. backcolumns  symbol  self  sets the columns to return after the update. build  expressionupdate  builds the expressionupdate object. details table of contentstoc constructors def newschema  schema instance methods def backcolumns  symbolsets the columns to return after the update. param columns arraysymbol the columns to return return self the current instanceexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .backname age  .commit update users set name  1 age  2 where id  3 returning name age john 30 1 def buildbuilds the expressionupdate object. return expressionupdate the update expression raise exception if the table is not setexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit update users set name  1 age  2 where id  3 john 30 1 def commitexecutes the update query and returns the result. return dbresult the result of the queryexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit update users set name  1 age  2 where id  3 john 30 1 def setsetters  hashsymbol dbanysets the column values to update using a hash. param setters hashsymbol dbany the column values to update return self the current instanceexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit update users set name  1 age  2 where id  3 john 30 1 def setsets the column values to update using keyword arguments. param fields hashsymbol dbany the column values to update return self the current instanceexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit update users set name  1 age  2 where id  3 john 30 1 def tabletable  symbolsets the table to update. param table symbol the name of the table return self the current instance raise exception if the table does not existexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit update users set name  1 age  2 where id  3 john 30 1 def to_sqlgen  schema.gengenerates the sql query and parameters. param gen expressiongenerator the generator to use return string arraydbany the query and parametersexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .to_sql update users set name  1 age  2 where id  3 john 30 1 def wheresets the where clause using a block. block  w expressionfilterbuilder the filter builder return self the current instance raise exception if the block is not provided raise exception if the block does not return an expressionexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .commit update users set name  1 age  2 where id  3 john 30 1 def whereattr  hashsymbol dbanysets the columns to return after the update. param columns arraysymbol the columns to return return self the current instance raise exception if the column does not exist raise exception if the column is not part of the tableexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .where  w w.id  1   .backname age  .commit def wheresets the where clause using keyword arguments. param fields hashsymbol dbany the conditions return self the current instance raise exception if the column does not exist raise exception if the value is invalidexamplecrystalupdate  cqlupdate.newschema  .tableusers  .setname john age 30  .whereid 1  .commit update users set name  1 age  2 where id  3 john 30 1",link:"/main/Cql/Update"},{title:"Guides",content:" guidesthe cql crystal query language toolkit simplifies the management and execution of sql queries in crystal. it supports crud operations complex query building and uses patterns like active record and repository for efficient data management. cql is compatible with multiple databases including postgresql. features include schema definition query execution data insertion updating and deletion. it also provides support for associations like has_many belongs_to and many_to_many.",link:"/main/Guides"},{title:"Core Concepts",content:" 3. core conceptscqls core concepts revolve around providing developers with tools to efficiently interact with databases through wellstructured apis. these concepts are fundamental to building and manipulating data models performing queries and managing transactions. heres a highlevel overview schemas define the structure of the database including tables columns and data types. crud operations simplify creating reading updating and deleting records in the database. query builder enables constructing sql queries using crystal code with features like joins and subqueries. transactions ensure safe and atomic execution of multiple database operations.",link:"/main/Guides/CoreConcepts"},{title:"Schema Definition",content:" schema definition in cql accelerating database iterationdefining the schema first is a fundamental approach in cql helping developers quickly structure their database while keeping their applications data model in sync with realworld entities. by defining your schema upfront you can rapidly iterate over your database tables making it easy to adjust data structures as your application evolves. this method ensures that your schema is the single source of truth giving you a clear view of how your data is organized and how relationships between different tables are modeled. benefits of defining the schema first1. faster prototyping with schemas defined at the outset you can rapidly experiment with different table structures and relationships making it easier to adjust your applications data model without writing complex migrations from scratch.2. clear data structure when your schema is predefined the applications data structure becomes clearer allowing developers to conceptualize how data is organized and interact with tables more easily.3. consistency ensuring the schema matches the database at all times removes ambiguity when writing queries handling relationships or performing migrations.4. automatic data validation cql schemas enforce data types and constraints such as primary auto_increment and text ensuring data integrity.5. simplified query building since the schema is explicit writing queries becomes easier as you can reference schema objects directly in queries avoiding mistakes or typos in table or column names. difference from other orm librariesunlike traditional orm libraries e.g. active record in rails or ecto in elixir which often allow defining database models alongside the code and handling schema evolution through migrations cql encourages defining the database schema as the first step.this schemafirst approach differs from the codefirst or migrationbased methodologies in that it avoids relying on automatic migrations or conventions to infer the structure of the database. cql enforces an explicit and structured approach to schema creation ensuring the database schema reflects the actual architecture of your application. example schema definitionheres a basic example of how to define a schema in cql for a movierelated databasecrystalacmedb2  cqlschema.build  acme_db  adapter cqladapterpostgres  uri envdatabase_url do  table movies do    primary id int64 auto_increment true    text title  end  table screenplays do    primary id int64 auto_increment true    bigint movie_id    text content  end  table actors do    primary id int64 auto_increment true    text name  end  table directors do    primary id int64 auto_increment true    bigint movie_id    text name  end  table movies_actors do    primary id int64 auto_increment true    bigint movie_id    bigint actor_id  endend explanation of schema definition database name acme_db defines the schema name. adapter cqladapterpostgres specifies the database adapter in this case postgresql. connection url the uri envdatabase_url specifies the database connection using environment variables.each table is explicitly defined with its columns such as movies table has id as the primary key and title as a text column. screenplays actors and directors define relationships between movies and associated records.this example shows how easy it is to define tables and manage relationships within the schema leading to amore organized and coherent database structure that aligns with the applications needs. multiple schemas flexibility and easy switchingone significant advantage of cql is the ability to define and manage multiple schemas within the same application. this is particularly useful in scenarios like multitenant applications where each tenant or environment has a separate database schema. cql makes switching between schemas seamless enabling developers to organize different parts of the application independently while maintaining the same connection configuration.this approach offers the following benefits clear separation of data each schema can encapsulate its own set of tables and relationships allowing better isolation and separation of concerns within the application. for example you might have a main schema for core business data and a separate analytics schema for reporting. simple switching switching between schemas is as simple as referring to the schema name thanks to cqls structured definition of schemas. this allows dynamic switching at runtime improving scalability in multitenant applications. example managing multiple schemascrystalmaindb  cqlschema.buildmain adapter cqladapterpostgres uri envmain_db_url do   define main schema tablesendanalyticsdb  cqlschema.buildanalytics adapter cqladapterpostgres uri envanalytics_db_url do   define analytics schema tablesendin this example you define multiple schemas and the application can easily switch between maindb and analyticsdb depending on which database needs to be queried. benefits of multiple schemas improved organization separate business logic data from other concerns like reporting testing or archiving. scalability ideal for multitenant applications allowing each tenant to have its schema without interference.by using cqls schema system you gain not only speed and clarity in your database structure but also flexibility in scaling and organizing your application.",link:"/main/Guides/CoreConcepts/Schemas"},{title:"Installation",content:" 2. installation guideto get started with cql in your crystal project follow these steps step 1 add dependencyfirst add cql to your project by including it in the shard.yml fileyamldependencies  cql    github azutoolkitcql    version  0.1.0 step 2 install shardsrun the following command to install the dependenciesbashshards install step 3 configure databaseset up your database connection by specifying the adapter and connection url. this is done by configuring the database in your code as followscrystalpostgresuserpasswordlocalhost5432database_namein this example were using postgresql. you can change the url according to your database mysql sqlite etc.. step 4 create the schemanow you can define your schema and run migrations explained in later sections.",link:"/main/Guides/Installation"},{title:"Introduction & Overview",content:" introduction  overview purpose of cqlcql crystal query language is a powerful tool designed for developers working with the crystal programming language. it provides a streamlined interface for interacting with sql databases combining the flexibility of raw sql with the safety and clarity of crystals type system. cql simplifies complex database operations making it easier to perform crud create read update delete operations manage database schemas and execute advanced queries. key features databaseagnostic cql supports multiple databases ensuring flexibility in project development. active record pattern integrates seamlessly with crystal structs allowing developers to work with database records as native crystal objects. query builder provides an intuitive api for constructing complex sql queries including joins subqueries and transactions. associations cql supports defining relationships between tables has_many belongs_to many_to_many making it easy to navigate related data. migrations facilitates schema evolution by allowing developers to create and manage database migrations. supported databasescql is designed to work with a range of sql databases including postgresql full support with advanced features like jsonb arrays and fulltext search. mysql support for common mysql operations though more advanced features may be limited. sqlite lightweight database support for development and testing environments. use casescql is ideal for developers looking to integrate crystal with sql databases providing a robust toolset for building datadriven applications. whether you are developing a smallscale application or a large enterprise system cql offers the performance and scalability needed to manage your database operations efficiently.",link:"/main/Guides/Introduction"}],a={data:t,regexForContentStripping:e};export{a as default};

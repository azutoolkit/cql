import{_ as a,o as l,c as n,x as e,a as s,N as t}from"./app.b139ab4d.js";import"./chunks/theme.1ff6d68a.js";const F=JSON.parse('{"title":"Cql::Repository(T, Pk)","description":"","frontmatter":{"title":"Cql::Repository(T, Pk)"},"headers":[{"level":2,"title":"Constructors","slug":"constructors","link":"#constructors","children":[{"level":3,"title":"def new(schema : Schema, table : Symbol)","slug":"def-new-schema-schema-table-symbol","link":"#def-new-schema-schema-table-symbol","children":[]}]},{"level":2,"title":"Instance Methods","slug":"instance-methods","link":"#instance-methods","children":[{"level":3,"title":"def all","slug":"def-all","link":"#def-all","children":[]},{"level":3,"title":"def build(attrs : Hash(Symbol, DB::Any))","slug":"def-build-attrs-hash-symbol-db-any","link":"#def-build-attrs-hash-symbol-db-any","children":[]},{"level":3,"title":"def count","slug":"def-count","link":"#def-count","children":[]},{"level":3,"title":"def create(attrs : Hash(Symbol, DB::Any))","slug":"def-create-attrs-hash-symbol-db-any","link":"#def-create-attrs-hash-symbol-db-any","children":[]},{"level":3,"title":"def create","slug":"def-create","link":"#def-create","children":[]},{"level":3,"title":"def delete(id : Pk)","slug":"def-delete-id-pk","link":"#def-delete-id-pk","children":[]},{"level":3,"title":"def delete","slug":"def-delete","link":"#def-delete","children":[]},{"level":3,"title":"def delete_all","slug":"def-delete-all","link":"#def-delete-all","children":[]},{"level":3,"title":"def delete_by","slug":"def-delete-by","link":"#def-delete-by","children":[]},{"level":3,"title":"def exists?","slug":"def-exists","link":"#def-exists","children":[]},{"level":3,"title":"def find(id : Pk)","slug":"def-find-id-pk","link":"#def-find-id-pk","children":[]},{"level":3,"title":"def find!(id : Pk)","slug":"def-find-id-pk-1","link":"#def-find-id-pk-1","children":[]},{"level":3,"title":"def find_all_by","slug":"def-find-all-by","link":"#def-find-all-by","children":[]},{"level":3,"title":"def find_by","slug":"def-find-by","link":"#def-find-by","children":[]},{"level":3,"title":"def first","slug":"def-first","link":"#def-first","children":[]},{"level":3,"title":"def insert","slug":"def-insert","link":"#def-insert","children":[]},{"level":3,"title":"def last","slug":"def-last","link":"#def-last","children":[]},{"level":3,"title":"def page(page_number, per_page = 10)","slug":"def-page-page-number-per-page-10","link":"#def-page-page-number-per-page-10","children":[]},{"level":3,"title":"def per_page(per_page)","slug":"def-per-page-per-page","link":"#def-per-page-per-page","children":[]},{"level":3,"title":"def query","slug":"def-query","link":"#def-query","children":[]},{"level":3,"title":"def update(id : Pk, attrs : Hash(Symbol, DB::Any))","slug":"def-update-id-pk-attrs-hash-symbol-db-any","link":"#def-update-id-pk-attrs-hash-symbol-db-any","children":[]},{"level":3,"title":"def update(id : Pk, **fields)","slug":"def-update-id-pk-fields","link":"#def-update-id-pk-fields","children":[]},{"level":3,"title":"def update","slug":"def-update","link":"#def-update","children":[]},{"level":3,"title":"def update_all(attrs : Hash(Symbol, DB::Any))","slug":"def-update-all-attrs-hash-symbol-db-any","link":"#def-update-all-attrs-hash-symbol-db-any","children":[]},{"level":3,"title":"def update_by(where_attrs : Hash(Symbol, DB::Any), update_attrs : Hash(Symbol, DB::Any))","slug":"def-update-by-where-attrs-hash-symbol-db-any-update-attrs-hash-symbol-db-any","link":"#def-update-by-where-attrs-hash-symbol-db-any-update-attrs-hash-symbol-db-any","children":[]}]}],"relativePath":"main/Cql/Repository.md","lastUpdated":1723931959000}'),r={name:"main/Cql/Repository.md"},o=e("div",null,[e("h1",{id:"class-cql-repository-t-pk",tabindex:"-1"},[s("class Cql::Repository(T, Pk) "),e("a",{class:"header-anchor",href:"#class-cql-repository-t-pk","aria-hidden":"true"},"#")]),e("p",null,[e("code",null,"Reference"),s(" < "),e("code",null,"Object")]),e("p",null,"A repository for a specific table This class provides a high-level interface for interacting with a table It provides methods for querying, creating, updating, and deleting records It also provides methods for pagination and counting records"),e("p",null,[e("strong",null,"Example"),s(" Creating a new repository")]),e("div",{class:"language-crystal"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"crystal"),e("pre",{"v-pre":"",class:"shiki material-theme-palenight",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#89DDFF","font-style":"italic"}},"class"),e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#FFCB6B"}},"UserRepository "),e("span",{style:{color:"#89DDFF"}},"<"),e("span",{style:{color:"#FFCB6B"}}," Cql::Repository"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#FFCB6B"}},"User"),e("span",{style:{color:"#89DDFF"}},")")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#89DDFF","font-style":"italic"}},"def"),e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#82AAFF"}},"initialize"),e("span",{style:{color:"#89DDFF"}},"(@"),e("span",{style:{color:"#BABED8"}},"schema "),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#FFCB6B"}},"Schema"),e("span",{style:{color:"#BABED8"}},", "),e("span",{style:{color:"#89DDFF"}},"@"),e("span",{style:{color:"#BABED8"}},"table "),e("span",{style:{color:"#89DDFF"}},":"),e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#FFCB6B"}},"Symbol"),e("span",{style:{color:"#89DDFF"}},")")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#89DDFF","font-style":"italic"}},"end")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#BABED8"}},"user_repo "),e("span",{style:{color:"#89DDFF"}},"="),e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#FFCB6B"}},"UserRepository"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#82AAFF"}},"new"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#BABED8"}},"schema"),e("span",{style:{color:"#89DDFF"}},","),e("span",{style:{color:"#BABED8"}}," "),e("span",{style:{color:"#89DDFF"}},":users)")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#BABED8"}},"user_repo"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#BABED8"}},"all")]),s(`
`),e("span",{class:"line"},[e("span",{style:{color:"#BABED8"}},"user_repo"),e("span",{style:{color:"#89DDFF"}},"."),e("span",{style:{color:"#82AAFF"}},"find"),e("span",{style:{color:"#89DDFF"}},"("),e("span",{style:{color:"#F78C6C"}},"1"),e("span",{style:{color:"#89DDFF"}},")")]),s(`
`),e("span",{class:"line"})])])]),e("details",{class:"details custom-block"},[e("summary",null,"Table of Contents"),e("nav",{class:"table-of-contents"},[e("ul",null,[e("li",null,[e("a",{href:"#constructors"},"Constructors"),e("ul",null,[e("li",null,[e("a",{href:"#def-new-schema-schema-table-symbol"},"def new(schema : Schema, table : Symbol)")])])]),e("li",null,[e("a",{href:"#instance-methods"},"Instance Methods"),e("ul",null,[e("li",null,[e("a",{href:"#def-all"},"def all")]),e("li",null,[e("a",{href:"#def-build-attrs-hash-symbol-db-any"},"def build(attrs : Hash(Symbol, DB::Any))")]),e("li",null,[e("a",{href:"#def-count"},"def count")]),e("li",null,[e("a",{href:"#def-create-attrs-hash-symbol-db-any"},"def create(attrs : Hash(Symbol, DB::Any))")]),e("li",null,[e("a",{href:"#def-create"},"def create")]),e("li",null,[e("a",{href:"#def-delete-id-pk"},"def delete(id : Pk)")]),e("li",null,[e("a",{href:"#def-delete"},"def delete")]),e("li",null,[e("a",{href:"#def-delete-all"},"def delete_all")]),e("li",null,[e("a",{href:"#def-delete-by"},"def delete_by")]),e("li",null,[e("a",{href:"#def-exists"},"def exists?")]),e("li",null,[e("a",{href:"#def-find-id-pk"},"def find(id : Pk)")]),e("li",null,[e("a",{href:"#def-find-id-pk-1"},"def find!(id : Pk)")]),e("li",null,[e("a",{href:"#def-find-all-by"},"def find_all_by")]),e("li",null,[e("a",{href:"#def-find-by"},"def find_by")]),e("li",null,[e("a",{href:"#def-first"},"def first")]),e("li",null,[e("a",{href:"#def-insert"},"def insert")]),e("li",null,[e("a",{href:"#def-last"},"def last")]),e("li",null,[e("a",{href:"#def-page-page-number-per-page-10"},"def page(page_number, per_page = 10)")]),e("li",null,[e("a",{href:"#def-per-page-per-page"},"def per_page(per_page)")]),e("li",null,[e("a",{href:"#def-query"},"def query")]),e("li",null,[e("a",{href:"#def-update-id-pk-attrs-hash-symbol-db-any"},"def update(id : Pk, attrs : Hash(Symbol, DB::Any))")]),e("li",null,[e("a",{href:"#def-update-id-pk-fields"},"def update(id : Pk, **fields)")]),e("li",null,[e("a",{href:"#def-update"},"def update")]),e("li",null,[e("a",{href:"#def-update-all-attrs-hash-symbol-db-any"},"def update_all(attrs : Hash(Symbol, DB::Any))")]),e("li",null,[e("a",{href:"#def-update-by-where-attrs-hash-symbol-db-any-update-attrs-hash-symbol-db-any"},"def update_by(where_attrs : Hash(Symbol, DB::Any), update_attrs : Hash(Symbol, DB::Any))")])])])])])])],-1),p=t(`<h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h2><h3 id="def-new-schema-schema-table-symbol" tabindex="-1">def new<code>(schema : Schema, table : Symbol)</code> <a class="header-anchor" href="#def-new-schema-schema-table-symbol" aria-hidden="true">#</a></h3><p>Initialize the repository with a schema and table name</p><ul><li><strong>@param</strong> schema [Schema] The schema to use</li><li><strong>@param</strong> table [Symbol] The name of the table</li><li><strong>@return</strong> [Repository] The repository object</li></ul><p><strong>Example</strong> Creating a new repository</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">UserRepository </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;"> Cql::Repository</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">User</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">user_repo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">UserRepository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">schema</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:users</span></span>
<span class="line"></span></code></pre></div><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-hidden="true">#</a></h2><h3 id="def-all" tabindex="-1">def all <a class="header-anchor" href="#def-all" aria-hidden="true">#</a></h3><p>Fetch all records of type T</p><ul><li><strong>@return</strong> [Array(T)] The records</li></ul><p><strong>Example</strong> Fetching all records</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">all</span></span>
<span class="line"></span></code></pre></div><h3 id="def-build-attrs-hash-symbol-db-any" tabindex="-1">def build<code>(attrs : Hash(Symbol, DB::Any))</code> <a class="header-anchor" href="#def-build-attrs-hash-symbol-db-any" aria-hidden="true">#</a></h3><p>Build a new object of type T with the given attributes</p><ul><li><strong>@param</strong> attrs [Hash(Symbol, DB::Any)] The attributes to use</li><li><strong>@return</strong> [T] The new object</li></ul><p><strong>Example</strong> Building a new user object</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">(name:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">email:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> [email protected]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-count" tabindex="-1">def count <a class="header-anchor" href="#def-count" aria-hidden="true">#</a></h3><p>Count all records in the table</p><ul><li><strong>@return</strong> [Int64] The number of records</li></ul><p><strong>Example</strong> Counting all records</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">count</span></span>
<span class="line"></span></code></pre></div><h3 id="def-create-attrs-hash-symbol-db-any" tabindex="-1">def create<code>(attrs : Hash(Symbol, DB::Any))</code> <a class="header-anchor" href="#def-create-attrs-hash-symbol-db-any" aria-hidden="true">#</a></h3><p>Create a new record with given attributes</p><ul><li><strong>@param</strong> attrs [Hash(Symbol, DB::Any)] The attributes to use</li><li><strong>@return</strong> [PrimaryKey] The ID of the new record <strong>Example</strong> Creating a new record</li></ul><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(name:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">email:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> [email protected]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-create" tabindex="-1">def create <a class="header-anchor" href="#def-create" aria-hidden="true">#</a></h3><h3 id="def-delete-id-pk" tabindex="-1">def delete<code>(id : Pk)</code> <a class="header-anchor" href="#def-delete-id-pk" aria-hidden="true">#</a></h3><p>Delete a record by ID</p><ul><li><strong>@param</strong> id [PrimaryKey] The ID of the record</li></ul><p><strong>Example</strong> Deleting a record by ID</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delete</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-delete" tabindex="-1">def delete <a class="header-anchor" href="#def-delete" aria-hidden="true">#</a></h3><h3 id="def-delete-all" tabindex="-1">def delete_all <a class="header-anchor" href="#def-delete-all" aria-hidden="true">#</a></h3><p>Delete all records in the table</p><p><strong>Example</strong> Deleting all records</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">delete_all</span></span>
<span class="line"></span></code></pre></div><h3 id="def-delete-by" tabindex="-1">def delete_by <a class="header-anchor" href="#def-delete-by" aria-hidden="true">#</a></h3><p>Delete records matching specific fields</p><ul><li><strong>@param</strong> fields [Hash(Symbol, DB::Any)] The fields to match</li></ul><p><strong>Example</strong> Deleting records by email</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delete_by</span><span style="color:#89DDFF;">(email:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> [email protected]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-exists" tabindex="-1">def exists? <a class="header-anchor" href="#def-exists" aria-hidden="true">#</a></h3><p>Check if records exist matching specific fields</p><ul><li><strong>@param</strong> fields [Hash(Symbol, DB::Any)] The fields to match</li><li><strong>@return</strong> [Bool] True if records exist, false otherwise</li></ul><p><strong>Example</strong> Checking if a record exists by email</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exists?</span><span style="color:#89DDFF;">(email:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> [email protected]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-find-id-pk" tabindex="-1">def find<code>(id : Pk)</code> <a class="header-anchor" href="#def-find-id-pk" aria-hidden="true">#</a></h3><p>Find a record by ID, return nil if not found</p><ul><li><strong>@param</strong> id [PrimaryKey] The ID of the record</li><li><strong>@return</strong> [T?] The record, or nil if not found</li></ul><p><strong>Example</strong> Fetching a record by ID</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-find-id-pk-1" tabindex="-1">def find!<code>(id : Pk)</code> <a class="header-anchor" href="#def-find-id-pk-1" aria-hidden="true">#</a></h3><p>Find a record by ID, raise an error if not found</p><ul><li><strong>@param</strong> id [PrimaryKey] The ID of the record</li><li><strong>@return</strong> [T] The record</li></ul><p><strong>Example</strong> Fetching a record by ID</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find!</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-find-all-by" tabindex="-1">def find_all_by <a class="header-anchor" href="#def-find-all-by" aria-hidden="true">#</a></h3><p>Find all records matching specific fields</p><ul><li><strong>@param</strong> fields [Hash(Symbol, DB::Any)] The fields to match</li><li><strong>@return</strong> [Array(T)] The records</li></ul><p><strong>Example</strong> Fetching all active users</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find_all_by</span><span style="color:#89DDFF;">(active:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-find-by" tabindex="-1">def find_by <a class="header-anchor" href="#def-find-by" aria-hidden="true">#</a></h3><p>Find a record by specific fields</p><ul><li><strong>@param</strong> fields [Hash(Symbol, DB::Any)] The fields to match</li><li><strong>@return</strong> [T?] The record, or nil if not found</li></ul><p><strong>Example</strong> Fetching a record by email</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find_by</span><span style="color:#89DDFF;">(email:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> [email protected]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-first" tabindex="-1">def first <a class="header-anchor" href="#def-first" aria-hidden="true">#</a></h3><p>Fetch the first record in the table</p><ul><li><strong>@return</strong> [T?] The first record, or nil if the table is empty</li></ul><p><strong>Example</strong> Fetching the first record</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">first</span></span>
<span class="line"></span></code></pre></div><h3 id="def-insert" tabindex="-1">def insert <a class="header-anchor" href="#def-insert" aria-hidden="true">#</a></h3><h3 id="def-last" tabindex="-1">def last <a class="header-anchor" href="#def-last" aria-hidden="true">#</a></h3><p>Fetch the last record in the table</p><ul><li><strong>@return</strong> [T?] The last record, or nil if the table is empty</li></ul><p><strong>Example</strong> Fetching the last record</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">last</span></span>
<span class="line"></span></code></pre></div><h3 id="def-page-page-number-per-page-10" tabindex="-1">def page<code>(page_number, per_page = 10)</code> <a class="header-anchor" href="#def-page-page-number-per-page-10" aria-hidden="true">#</a></h3><p>Paginate results based on page number and items per page</p><ul><li><strong>@param</strong> page_number [Int32] The page number to fetch</li><li><strong>@param</strong> per_page [Int32] The number of items per page</li><li><strong>@return</strong> [Array(T)] The records for the page</li></ul><p><strong>Example</strong> Paginating results</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">page</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-per-page-per-page" tabindex="-1">def per_page<code>(per_page)</code> <a class="header-anchor" href="#def-per-page-per-page" aria-hidden="true">#</a></h3><p>Limit the number of results per page</p><ul><li><strong>@param</strong> per_page [Int32] The number of items per page</li><li><strong>@return</strong> [Array(T)] The records for the page</li></ul><p><strong>Example</strong> Limiting results per page</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">per_page</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-query" tabindex="-1">def query <a class="header-anchor" href="#def-query" aria-hidden="true">#</a></h3><h3 id="def-update-id-pk-attrs-hash-symbol-db-any" tabindex="-1">def update<code>(id : Pk, attrs : Hash(Symbol, DB::Any))</code> <a class="header-anchor" href="#def-update-id-pk-attrs-hash-symbol-db-any" aria-hidden="true">#</a></h3><p>Update a record by ID with given attributes</p><ul><li><strong>@param</strong> id [PrimaryKey] The ID of the record</li><li><strong>@param</strong> attrs [Hash(Symbol, DB::Any)] The attributes to update</li></ul><p><strong>Example</strong> Updating a record by ID</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">active:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-update-id-pk-fields" tabindex="-1">def update<code>(id : Pk, **fields)</code> <a class="header-anchor" href="#def-update-id-pk-fields" aria-hidden="true">#</a></h3><p>Update a record by ID with given fields</p><ul><li><strong>@param</strong> id [PrimaryKey] The ID of the record</li><li><strong>@param</strong> fields [Hash(Symbol, DB::Any)] The fields to update</li></ul><p><strong>Example</strong> Updating a record by ID</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">active:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-update" tabindex="-1">def update <a class="header-anchor" href="#def-update" aria-hidden="true">#</a></h3><h3 id="def-update-all-attrs-hash-symbol-db-any" tabindex="-1">def update_all<code>(attrs : Hash(Symbol, DB::Any))</code> <a class="header-anchor" href="#def-update-all-attrs-hash-symbol-db-any" aria-hidden="true">#</a></h3><p>Update all records with given attributes</p><ul><li><strong>@param</strong> attrs [Hash(Symbol, DB::Any)] The attributes to update</li></ul><p><strong>Example</strong> Updating all records</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update_all</span><span style="color:#89DDFF;">(active:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="def-update-by-where-attrs-hash-symbol-db-any-update-attrs-hash-symbol-db-any" tabindex="-1">def update_by<code>(where_attrs : Hash(Symbol, DB::Any), update_attrs : Hash(Symbol, DB::Any))</code> <a class="header-anchor" href="#def-update-by-where-attrs-hash-symbol-db-any-update-attrs-hash-symbol-db-any" aria-hidden="true">#</a></h3><p>Update records matching where attributes with update attributes</p><ul><li><strong>@param</strong> where_attrs [Hash(Symbol, DB::Any)] The attributes to match</li><li><strong>@param</strong> update_attrs [Hash(Symbol, DB::Any)] The attributes to update</li></ul><p><strong>Example</strong> Updating records by email</p><div class="language-crystal"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">user_repo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update_by</span><span style="color:#89DDFF;">(email:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> [email protected]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">active:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>:::</p>`,111),d=[o,p];function i(c,y,h,u,f,D){return l(),n("div",null,d)}const m=a(r,[["render",i]]);export{F as __pageData,m as default};
